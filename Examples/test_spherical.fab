function GetBeamPos(anglesteps, stacksteps, radius)
	local vertices = {}

	local stackangle = math.pi / stacksteps;
	local stepangle = 2*math.pi/ anglesteps;

	local longitude = 0;
	local latitude = math.pi;

	for stack = 0, stacksteps do
		local v = stack/stacksteps
		for astep = 0, anglesteps do
			u = astep/anglesteps
			local longitude = u * 2 * math.pi;
			local latitude = math.pi - v * math.pi;

			p = sph_to_cart(sph(longitude, latitude, radius))
			table.insert(vertices, p)
		end
	end

	return vertices;
end


local radius = 50
local beamsteps = 400
local stacksteps = 180
local anglesteps = 180

--local balls = {{-10, -13, 0, 5}}
--local balls = {{-10, -13, 0, 5}, {10, -13, 0, 5}}
local balls = {{-10, -13, 0, 5}, {10, -13, 0, 5}, {-2, 11, 0, 5}}
--local balls = {{-10, -13, 0, 5},{10, -13, 0, 5}, {-2, 11, 0, 5},{-2, 11, 5, 3}}
--balls = {{-10, -13, 0, 5},{10, -13, 0, 5}, {-2, 11, 0, 5},{-2, 11, 5, 3},{-2, 18, 7, 2}}

-- Display beam locations
-- Calculate from metaball, so we can get centroid
local lshape = shape_metaball:new({
	balls = balls,
	radius = radius,
	stacksteps = stacksteps,
	anglesteps = anglesteps,
	beamsteps = beamsteps
	});

atcenter = centroid(balls)
vec3_print_tuple(atcenter)


verts = GetBeamPos(anglesteps, stacksteps, radius);

color(crayola.rgb("Caribbean Green"))
--for _,v in ipairs(verts) do
--	translate(vec3_add(v, atcenter))
--	tetrahedron(2)
--end


-- Render the blob
color(crayola.rgba("Yellow", 1))
--[[
blobverts = lshape:GetVertices()
print("Number: ", #blobverts)

for _,v in ipairs(blobverts) do
	translate(v)
	tetrahedron(0.2)
end
--]]

blobs(balls, radius, stacksteps, anglesteps, beamsteps)
